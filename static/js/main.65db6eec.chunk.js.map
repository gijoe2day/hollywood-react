{"version":3,"sources":["components/Navbar.js","components/Planet.js","components/Planets.js","components/Person.js","components/People.js","App.js","index.js"],"names":["Navbar","setPage","onClick","Planet","planet","className","name","population","terrain","fetchPlanets","key","page","a","fetch","res","json","Planets","useState","usePaginatedQuery","resolvedData","latestData","status","old","Math","max","disabled","next","results","map","Person","person","gender","birth_year","fetchPeople","People","useQuery","data","console","log","App","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAWeA,EATA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,6BACE,4BAAQC,QAAS,kBAAMD,EAAQ,aAA/B,WACA,4BAAQC,QAAS,kBAAMD,EAAQ,YAA/B,Y,8BCMSE,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAOE,MACZ,2CAAiBF,EAAOG,WAAxB,KACA,wCAAcH,EAAOI,WCHrBC,EAAY,uCAAG,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,sEACDC,MAAM,sCAAD,OAAuCF,IAD3C,cACbG,EADa,yBAEZA,EAAIC,QAFQ,2CAAH,wDAkDHC,EA7CC,WAAO,IAAD,EACIC,mBAAS,GADb,mBACbN,EADa,KACPV,EADO,OAEyBiB,YAC3C,CAAC,UAAWP,GACZF,GAFMU,EAFY,EAEZA,aAAcC,EAFF,EAEEA,WAAYC,EAFd,EAEcA,OAKlC,OACE,6BACE,uCAEY,YAAXA,GAAwB,6CAEb,UAAXA,GAAsB,oDAEX,YAAXA,GACC,oCACE,4BACEnB,QAAS,kBAAMD,GAAQ,SAACqB,GAAD,OAASC,KAAKC,IAAIF,EAAM,EAAG,OAClDG,SAAmB,IAATd,GAFZ,iBAMA,8BAAOA,GACP,4BACET,QAAS,kBACPD,GAAQ,SAACqB,GAAD,OACLF,GAAeA,EAAWM,KAAaJ,EAAM,EAAZA,MAGtCG,UAAWL,IAAeA,EAAWM,MANvC,aAUA,6BACGP,EAAaQ,QAAQC,KAAI,SAACxB,GAAD,OACxB,kBAAC,EAAD,CAAQM,IAAKN,EAAOE,KAAMF,OAAQA,WCjCjCyB,EAVA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,yBAAKzB,UAAU,QACb,4BAAKyB,EAAOxB,MACZ,uCAAawB,EAAOC,OAApB,KACA,2CAAiBD,EAAOE,cCFxBC,EAAW,uCAAG,4BAAArB,EAAA,sEACAC,MAAM,iCADN,cACZC,EADY,yBAEXA,EAAIC,QAFO,2CAAH,qDA2BFmB,EAtBA,WAAO,IAAD,EACMC,YAAS,SAAUF,GAApCG,EADW,EACXA,KAAMf,EADK,EACLA,OAGd,OAFAgB,QAAQC,IAAIF,GAGV,6BACE,sCACY,UAAXf,GAAsB,oDAEX,YAAXA,GAAwB,6CAEb,YAAXA,GACC,6BACGe,EAAKT,QAAQC,KAAI,SAACE,GAAD,OAChB,kBAAC,EAAD,CAAQpB,IAAKoB,EAAOxB,KAAMwB,OAAQA,U,OCF/BS,MAff,WAAgB,IAAD,EACWtB,mBAAS,WADpB,mBACNN,EADM,KACAV,EADA,KAEb,OACE,oCACE,yBAAKI,UAAU,OACb,8CACA,kBAAC,EAAD,CAAQJ,QAASA,IACjB,yBAAKI,UAAU,YACL,YAATM,EAAqB,kBAAC,EAAD,MAAc,kBAAC,EAAD,OAEtC,kBAAC,qBAAD,CAAoB6B,eAAe,MCZzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.65db6eec.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = ({ setPage }) => {\n  return (\n    <nav>\n      <button onClick={() => setPage(\"planets\")}>Planets</button>\n      <button onClick={() => setPage(\"people\")}>People</button>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Planet = ({ planet }) => {\n  return (\n    <div className=\"card\">\n      <h3>{planet.name}</h3>\n      <p>Population - {planet.population} </p>\n      <p>Terrain - {planet.terrain}</p>\n    </div>\n  );\n};\n\nexport default Planet;\n","import React, { useState } from \"react\";\nimport { usePaginatedQuery } from \"react-query\";\nimport Planet from \"./Planet\";\n\nconst fetchPlanets = async (key, page) => {\n  const res = await fetch(`http://swapi.dev/api/planets/?page=${page}`);\n  return res.json();\n};\n\nconst Planets = () => {\n  const [page, setPage] = useState(1);\n  const { resolvedData, latestData, status } = usePaginatedQuery(\n    [\"planets\", page],\n    fetchPlanets\n  );\n\n  return (\n    <div>\n      <h2>Planets</h2>\n\n      {status === \"loading\" && <div>Loading data</div>}\n\n      {status === \"error\" && <div>Error fetching data</div>}\n\n      {status === \"success\" && (\n        <>\n          <button\n            onClick={() => setPage((old) => Math.max(old - 1, 1))}\n            disabled={page === 1}\n          >\n            Previous Page\n          </button>\n          <span>{page}</span>\n          <button\n            onClick={() =>\n              setPage((old) =>\n                !latestData || !latestData.next ? old : old + 1\n              )\n            }\n            disabled={!latestData || !latestData.next}\n          >\n            Next page\n          </button>\n          <div>\n            {resolvedData.results.map((planet) => (\n              <Planet key={planet.name} planet={planet} />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Planets;\n","import React from \"react\";\n\nconst Person = ({ person }) => {\n  return (\n    <div className=\"card\">\n      <h3>{person.name}</h3>\n      <p>Gender - {person.gender} </p>\n      <p>Birth Year - {person.birth_year}</p>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from \"react\";\nimport Person from \"./Person\";\n\nimport { useQuery } from \"react-query\";\n\nconst fetchPeople = async () => {\n  const res = await fetch(\"https://swapi.dev/api/people/\");\n  return res.json();\n};\n\nconst People = () => {\n  const { data, status } = useQuery(\"people\", fetchPeople);\n  console.log(data);\n\n  return (\n    <div>\n      <h2>People</h2>\n      {status === \"errer\" && <div>Error fetching data</div>}\n\n      {status === \"loading\" && <div>Loading data</div>}\n\n      {status === \"success\" && (\n        <div>\n          {data.results.map((person) => (\n            <Person key={person.name} person={person} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default People;\n","import React, { useState } from \"react\";\n\nimport Navbar from \"./components/Navbar\";\nimport Planets from \"./components/Planets\";\nimport People from \"./components/People\";\nimport { ReactQueryDevtools } from \"react-query-devtools\";\n\nfunction App() {\n  const [page, setPage] = useState(\"planets\");\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Star wars info</h1>\n        <Navbar setPage={setPage} />\n        <div className=\"content\"></div>\n        {page === \"planets\" ? <Planets /> : <People />}\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}